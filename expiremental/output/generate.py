import json
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

def extract_text_by_page(document_json):
    """
    Extracts the text from the Document AI JSON output and associates it with each page.

    Args:
    - document_json: JSON data from Google Document AI output.

    Returns:
    - A dictionary containing text for each page.
    """
    full_text = document_json['text']  # This contains the full text of the document

    # Initialize the output dictionary
    output_data = []

    # Loop through each page in the document
    for page_num, page in enumerate(document_json['pages']):
        page_text = ""

        # Loop through the blocks in each page
        for block in page['blocks']:
            # Extract text using the text segments (anchors) in the block layout
            if 'textAnchor' in block['layout'] and 'textSegments' in block['layout']['textAnchor']:
                for segment in block['layout']['textAnchor']['textSegments']:
                    start_idx = int(segment.get('startIndex', 0))  # Start index defaults to 0 if missing
                    end_idx = int(segment.get('endIndex', len(full_text)))  # End index defaults to the length of the text
                    page_text += full_text[start_idx:end_idx] + " "  # Add space between blocks for readability

        # Append text for the page
        output_data.append({
            "page_number": page_num + 1,
            "text": page_text.strip()  # Remove leading/trailing whitespace
        })

    return output_data

def save_text_to_pdf(extracted_data, output_pdf_path):
    """
    Saves the extracted text to a PDF, with each page's text on a separate page.

    Args:
    - extracted_data: List of dictionaries containing page text.
    - output_pdf_path: The path where the PDF will be saved.
    """
    # Create a new PDF with ReportLab
    c = canvas.Canvas(output_pdf_path, pagesize=letter)
    width, height = letter

    for page in extracted_data:
        page_text = page["text"]
        text_object = c.beginText(40, height - 40)  # Starting position for text
        text_object.setFont("Helvetica", 5)  # Set the font and size (e.g., 12 points)


        # Add text to the page, wrapping lines if necessary
        for line in page_text.splitlines():
            text_object.textLine(line)

        # Draw the text object and move to the next page
        c.drawText(text_object)
        c.showPage()

    # Save the PDF file
    c.save()

# Load the JSON file generated by Google Cloud Document AI
with open('C:\\Users\\herre\\Desktop\\work\\google-ocr\\expiremental\\output\\output\\batch\\1\\707188629682975322\\0\\180-0.json', 'r', encoding='utf-8') as file:
    document_json = json.load(file)

# Extract text by page
# extracted_data = extract_text_by_page(document_json)

# # Save the segmented text into a new PDF file
# save_text_to_pdf(extracted_data, 'output_document.pdf')

# print("Text segmented by page has been saved to output_document.pdf")

# import json
# from reportlab.lib.pagesizes import letter
# from reportlab.pdfgen import canvas

# def extract_text_with_boxes(document_json):
#     """
#     Extracts text with position data from Document AI JSON output.

#     Args:
#     - document_json: JSON data from Google Document AI output.

#     Returns:
#     - A list of dictionaries, each containing page number, text, and bounding box information.
#     """
#     full_text = document_json['text']
#     output_data = []

#     for page_num, page in enumerate(document_json['pages']):
#         page_items = []

#         # Extracting text and bounding boxes
#         for block in page['blocks']:
#             if 'textAnchor' in block['layout'] and 'textSegments' in block['layout']['textAnchor']:
#                 block_text = ""
#                 for segment in block['layout']['textAnchor']['textSegments']:
#                     start_idx = int(segment.get('startIndex', 0))
#                     end_idx = int(segment.get('endIndex', len(full_text)))
#                     block_text += full_text[start_idx:end_idx] + " "

#                 # Extract bounding box coordinates
#                 if 'boundingPoly' in block['layout']:
#                     vertices = block['layout']['boundingPoly']['normalizedVertices']
#                     x_min = min(v['x'] for v in vertices) * letter[0]
#                     y_min = (1 - max(v['y'] for v in vertices)) * letter[1]
#                     x_max = max(v['x'] for v in vertices) * letter[0]
#                     y_max = (1 - min(v['y'] for v in vertices)) * letter[1]

#                     page_items.append({
#                         "content": block_text.strip(),
#                         "x": x_min,
#                         "y": y_max,
#                         "width": x_max - x_min,
#                         "height": y_max - y_min
#                     })

#         output_data.append({
#             "page_number": page_num + 1,
#             "items": page_items
#         })

#     return output_data

# def save_text_to_pdf_with_boxes(extracted_data, output_pdf_path):
#     """
#     Saves extracted text to a PDF, positioning text on each page based on bounding boxes.

#     Args:
#     - extracted_data: List containing text and position for each page.
#     - output_pdf_path: Path to save the new PDF.
#     """
#     c = canvas.Canvas(output_pdf_path, pagesize=letter)

#     for page in extracted_data:
#         for item in page["items"]:
#             # Set font size to fit bounding box height
#             font_size = min(12, item["height"])  # Limit font size for readability
#             c.setFont("Helvetica", font_size)
#             c.drawString(item["x"], item["y"], item["content"])

#         # Move to the next page after each page's items are drawn
#         c.showPage()

#     # Save the final PDF
#     c.save()

# # Load the JSON file generated by Google Cloud Document AI
# with open('expiremental\\output\\output\\batch\\1\\707188629682975322\\0\\180-0.json', 'r', encoding='utf-8') as file:
#     document_json = json.load(file)

# # Extract text with bounding box positions
# extracted_data = extract_text_with_boxes(document_json)

# # Save the formatted text into a new PDF file
# save_text_to_pdf_with_boxes(extracted_data, 'output_document_with_boxes.pdf')

# print("Text with bounding boxes has been saved to output_document_with_boxes.pdf")
